# ────────────────────────────────────────────────────────
# CI + CD: Test → Build → Push to Docker Hub → Deploy to Railway ,j
# ────────────────────────────────────────────────────────
name: CI-CD | Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ────────────────────────────────────────────────────────
# Global environment variables for the workflow
# ────────────────────────────────────────────────────────
env:
  # Docker image repository name on Docker Hub
  # DOCKERHUB_USERNAME is a GitHub Secret, injected dynamically
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/hand-gesture-api 

  # Railway deployment variables (configured as GitHub Repository Variables)
  RAILWAY_PROJECT: ${{ vars.RAILWAY_PROJECT_ID }}   # Your Railway Project ID
  RAILWAY_SERVICE: ${{ vars.RAILWAY_SERVICE_NAME }} # Your Railway Service Name (e.g., 'hand-gesture-api-service')

  # Toggle: 'true'  ➜ Skips deployment, only builds and pushes Docker image
  #          'false' ➜ Performs full deployment to Railway
  DRY_RUN:           ${{ vars.DRY_RUN || 'true' }} # Defaults to 'true' if not set in Repository Variables

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    # ... (steps 1-5: Checkout, Python setup, Docker Hub login, Build & push image, Install Railway CLI) ...

    # ────────────────────────────────
    # 6. Deploy to Railway (skipped if DRY_RUN is 'true')
    # ────────────────────────────────
    - name: Deploy to Railway
      if: env.DRY_RUN == 'false'
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} # Pass the Railway API token as an environment variable
        # Explicitly set these env vars from vars context for the run step
        RAILWAY_PROJECT_ENV: ${{ vars.RAILWAY_PROJECT_ID }}
        RAILWAY_SERVICE_ENV: ${{ vars.RAILWAY_SERVICE_NAME }}
      run: |
        # --- DEBUGGING AND ROBUSTNESS CHECKS ---
        echo "Debugging Railway Variables:"
        echo "RAILWAY_PROJECT_ID (from vars context): '${{ vars.RAILWAY_PROJECT_ID }}'"
        echo "RAILWAY_SERVICE_NAME (from vars context): '${{ vars.RAILWAY_SERVICE_NAME }}'"
        echo "RAILWAY_PROJECT_ENV (from env block): '${{ env.RAILWAY_PROJECT_ENV }}'"
        echo "RAILWAY_SERVICE_ENV (from env block): '${{ env.RAILWAY_SERVICE_ENV }}'"

        # Check if critical variables are empty
        if [ -z "${{ env.RAILWAY_PROJECT_ENV }}" ]; then
          echo "Error: RAILWAY_PROJECT_ID is empty. Please set it as a Repository Variable."
          exit 1
        fi
        if [ -z "${{ env.RAILWAY_SERVICE_ENV }}" ]; then
          echo "Error: RAILWAY_SERVICE_NAME is empty. Please set it as a Repository Variable."
          exit 1
        fi
        # --- END DEBUGGING AND ROBUSTNESS CHECKS ---

        # 1. Set the Railway project and service context for subsequent commands
        echo "Setting Railway context for Project: ${{ env.RAILWAY_PROJECT_ENV }}, Service: ${{ env.RAILWAY_SERVICE_ENV }}"
        railway use --project ${{ env.RAILWAY_PROJECT_ENV }} --service ${{ env.RAILWAY_SERVICE_ENV }}

        # 2. Deploy the Docker image to the established context
        echo "Deploying image: ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}"
        railway deploy --image ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}
